; Parallel reduction kernel (fixed)
; Each thread i adds pair (2*i, 2*i+1) in first phase, then active threads halve each phase.

; Registers:
; R7 = thread_id (given by core)
; R0 = base address
; R1 = stride / offset
; R2 = temp1
; R3 = temp2

SET R0, 0          ; base address start at 0
SET R1, 1          ; IMPORTANT: initialize stride = 1
SET R8, 0          ; phase counter
phase_loop:
    MUL R2, R7, 2
    MUL R2, R2, R1
    ADD R2, R2, R0    ; addrA = base + (tid * 2 * stride)

    ADD R3, R2, R1    ; addrB = addrA + stride

    LD R4, R2         ; valA
    LD R5, R3         ; valB
    ADD R6, R4, R5    ; sum
    ST R2, R6         ; store sum at addrA

    SYNC

    MUL R1, R1, 2     ; stride *= 2
    ADD R8, R8, 1
    BNE R8, 3, phase_loop   ; for ARRAY_LEN=8 we need 3 phases
done:
    JMP done
